package models

import (
	"github.com/goyourt/yogourt/services"
	"golang.org/x/crypto/bcrypt"
)

type Security struct {
	ID     int    `gorm:"primaryKey;autoIncrement;not null;unique" json:"id"`
	UserId int    `gorm:"unique;not null"`
	User   User   `gorm:"constraint:OnUpdate:CASCADE,OnDelete:CASCADE;" json:"User"`
	Hash   string `gorm:"not null" json:"Hash"`
}

func (u *Security) GetUser() User {
	return u.User
}

func (u *Security) SetHash(pwd string) error {
	hash, err := services.GetHashedPassword(pwd)
	if err != nil {
		return err
	}
	u.Hash = hash
	return nil
}

func (u *Security) CompareHash(pwd string) bool {
	err := bcrypt.CompareHashAndPassword([]byte(u.Hash), []byte(pwd))
	return err == nil
}
